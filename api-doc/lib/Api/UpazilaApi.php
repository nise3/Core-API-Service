<?php
/**
 * UpazilaApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NISE_3_CORE_API
 *
 * It a core api service that manages Location Services,UserRoleManagement Services and Auth Services globally
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UpazilaApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UpazilaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1UpazilasGet
     *
     * get-list
     *
     * @param  int $page page (optional)
     * @param  string $order order (optional)
     * @param  string $title_en title_en (optional)
     * @param  string $title_bn title_bn (optional)
     * @param  int $loc_division_id loc_division_id (optional)
     * @param  int $loc_district_id loc_district_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UpazilasGet($page = null, $order = null, $title_en = null, $title_bn = null, $loc_division_id = null, $loc_district_id = null)
    {
        $this->apiV1UpazilasGetWithHttpInfo($page, $order, $title_en, $title_bn, $loc_division_id, $loc_district_id);
    }

    /**
     * Operation apiV1UpazilasGetWithHttpInfo
     *
     * get-list
     *
     * @param  int $page (optional)
     * @param  string $order (optional)
     * @param  string $title_en (optional)
     * @param  string $title_bn (optional)
     * @param  int $loc_division_id (optional)
     * @param  int $loc_district_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UpazilasGetWithHttpInfo($page = null, $order = null, $title_en = null, $title_bn = null, $loc_division_id = null, $loc_district_id = null)
    {
        $request = $this->apiV1UpazilasGetRequest($page, $order, $title_en, $title_bn, $loc_division_id, $loc_district_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UpazilasGetAsync
     *
     * get-list
     *
     * @param  int $page (optional)
     * @param  string $order (optional)
     * @param  string $title_en (optional)
     * @param  string $title_bn (optional)
     * @param  int $loc_division_id (optional)
     * @param  int $loc_district_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasGetAsync($page = null, $order = null, $title_en = null, $title_bn = null, $loc_division_id = null, $loc_district_id = null)
    {
        return $this->apiV1UpazilasGetAsyncWithHttpInfo($page, $order, $title_en, $title_bn, $loc_division_id, $loc_district_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UpazilasGetAsyncWithHttpInfo
     *
     * get-list
     *
     * @param  int $page (optional)
     * @param  string $order (optional)
     * @param  string $title_en (optional)
     * @param  string $title_bn (optional)
     * @param  int $loc_division_id (optional)
     * @param  int $loc_district_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasGetAsyncWithHttpInfo($page = null, $order = null, $title_en = null, $title_bn = null, $loc_division_id = null, $loc_district_id = null)
    {
        $returnType = '';
        $request = $this->apiV1UpazilasGetRequest($page, $order, $title_en, $title_bn, $loc_division_id, $loc_district_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UpazilasGet'
     *
     * @param  int $page (optional)
     * @param  string $order (optional)
     * @param  string $title_en (optional)
     * @param  string $title_bn (optional)
     * @param  int $loc_division_id (optional)
     * @param  int $loc_district_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UpazilasGetRequest($page = null, $order = null, $title_en = null, $title_bn = null, $loc_division_id = null, $loc_district_id = null)
    {

        $resourcePath = '/api/v1/upazilas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($title_en !== null) {
            if('form' === 'form' && is_array($title_en)) {
                foreach($title_en as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_en'] = $title_en;
            }
        }
        // query params
        if ($title_bn !== null) {
            if('form' === 'form' && is_array($title_bn)) {
                foreach($title_bn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_bn'] = $title_bn;
            }
        }
        // query params
        if ($loc_division_id !== null) {
            if('form' === 'form' && is_array($loc_division_id)) {
                foreach($loc_division_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_division_id'] = $loc_division_id;
            }
        }
        // query params
        if ($loc_district_id !== null) {
            if('form' === 'form' && is_array($loc_district_id)) {
                foreach($loc_district_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_district_id'] = $loc_district_id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UpazilasPost
     *
     * store
     *
     * @param  int $loc_division_id loc_division_id (required)
     * @param  int $loc_district_id loc_district_id (required)
     * @param  string $title_en title_en (required)
     * @param  string $title_bn title_bn (required)
     * @param  string $division_bbs_code division_bbs_code (optional)
     * @param  string $district_bbs_code district_bbs_code (optional)
     * @param  float $bbs_code bbs_code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UpazilasPost($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $this->apiV1UpazilasPostWithHttpInfo($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);
    }

    /**
     * Operation apiV1UpazilasPostWithHttpInfo
     *
     * store
     *
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  string $division_bbs_code (optional)
     * @param  string $district_bbs_code (optional)
     * @param  float $bbs_code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UpazilasPostWithHttpInfo($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $request = $this->apiV1UpazilasPostRequest($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UpazilasPostAsync
     *
     * store
     *
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  string $division_bbs_code (optional)
     * @param  string $district_bbs_code (optional)
     * @param  float $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasPostAsync($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        return $this->apiV1UpazilasPostAsyncWithHttpInfo($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UpazilasPostAsyncWithHttpInfo
     *
     * store
     *
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  string $division_bbs_code (optional)
     * @param  string $district_bbs_code (optional)
     * @param  float $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasPostAsyncWithHttpInfo($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $returnType = '';
        $request = $this->apiV1UpazilasPostRequest($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UpazilasPost'
     *
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  string $division_bbs_code (optional)
     * @param  string $district_bbs_code (optional)
     * @param  float $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UpazilasPostRequest($loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        // verify the required parameter 'loc_division_id' is set
        if ($loc_division_id === null || (is_array($loc_division_id) && count($loc_division_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_division_id when calling apiV1UpazilasPost'
            );
        }
        // verify the required parameter 'loc_district_id' is set
        if ($loc_district_id === null || (is_array($loc_district_id) && count($loc_district_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_district_id when calling apiV1UpazilasPost'
            );
        }
        // verify the required parameter 'title_en' is set
        if ($title_en === null || (is_array($title_en) && count($title_en) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title_en when calling apiV1UpazilasPost'
            );
        }
        // verify the required parameter 'title_bn' is set
        if ($title_bn === null || (is_array($title_bn) && count($title_bn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title_bn when calling apiV1UpazilasPost'
            );
        }
        if ($division_bbs_code !== null && strlen($division_bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$division_bbs_code" when calling UpazilaApi.apiV1UpazilasPost, must be smaller than or equal to 4.');
        }

        if ($district_bbs_code !== null && strlen($district_bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$district_bbs_code" when calling UpazilaApi.apiV1UpazilasPost, must be smaller than or equal to 4.');
        }

        if ($bbs_code !== null && strlen($bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$bbs_code" when calling UpazilaApi.apiV1UpazilasPost, must be smaller than or equal to 4.');
        }


        $resourcePath = '/api/v1/upazilas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loc_division_id !== null) {
            if('form' === 'form' && is_array($loc_division_id)) {
                foreach($loc_division_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_division_id'] = $loc_division_id;
            }
        }
        // query params
        if ($loc_district_id !== null) {
            if('form' === 'form' && is_array($loc_district_id)) {
                foreach($loc_district_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_district_id'] = $loc_district_id;
            }
        }
        // query params
        if ($division_bbs_code !== null) {
            if('form' === 'form' && is_array($division_bbs_code)) {
                foreach($division_bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['division_bbs_code'] = $division_bbs_code;
            }
        }
        // query params
        if ($district_bbs_code !== null) {
            if('form' === 'form' && is_array($district_bbs_code)) {
                foreach($district_bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['district_bbs_code'] = $district_bbs_code;
            }
        }
        // query params
        if ($title_en !== null) {
            if('form' === 'form' && is_array($title_en)) {
                foreach($title_en as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_en'] = $title_en;
            }
        }
        // query params
        if ($title_bn !== null) {
            if('form' === 'form' && is_array($title_bn)) {
                foreach($title_bn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_bn'] = $title_bn;
            }
        }
        // query params
        if ($bbs_code !== null) {
            if('form' === 'form' && is_array($bbs_code)) {
                foreach($bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bbs_code'] = $bbs_code;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdDelete
     *
     * destroy
     *
     * @param  int $upazila_id upazila_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UpazilasUpazilaIdDelete($upazila_id)
    {
        $this->apiV1UpazilasUpazilaIdDeleteWithHttpInfo($upazila_id);
    }

    /**
     * Operation apiV1UpazilasUpazilaIdDeleteWithHttpInfo
     *
     * destroy
     *
     * @param  int $upazila_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UpazilasUpazilaIdDeleteWithHttpInfo($upazila_id)
    {
        $request = $this->apiV1UpazilasUpazilaIdDeleteRequest($upazila_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UpazilasUpazilaIdDeleteAsync
     *
     * destroy
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdDeleteAsync($upazila_id)
    {
        return $this->apiV1UpazilasUpazilaIdDeleteAsyncWithHttpInfo($upazila_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdDeleteAsyncWithHttpInfo
     *
     * destroy
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdDeleteAsyncWithHttpInfo($upazila_id)
    {
        $returnType = '';
        $request = $this->apiV1UpazilasUpazilaIdDeleteRequest($upazila_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UpazilasUpazilaIdDelete'
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UpazilasUpazilaIdDeleteRequest($upazila_id)
    {
        // verify the required parameter 'upazila_id' is set
        if ($upazila_id === null || (is_array($upazila_id) && count($upazila_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upazila_id when calling apiV1UpazilasUpazilaIdDelete'
            );
        }

        $resourcePath = '/api/v1/upazilas/{upazilaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($upazila_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upazilaId' . '}',
                ObjectSerializer::toPathValue($upazila_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdGet
     *
     * get one
     *
     * @param  int $upazila_id upazila_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UpazilasUpazilaIdGet($upazila_id)
    {
        $this->apiV1UpazilasUpazilaIdGetWithHttpInfo($upazila_id);
    }

    /**
     * Operation apiV1UpazilasUpazilaIdGetWithHttpInfo
     *
     * get one
     *
     * @param  int $upazila_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UpazilasUpazilaIdGetWithHttpInfo($upazila_id)
    {
        $request = $this->apiV1UpazilasUpazilaIdGetRequest($upazila_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UpazilasUpazilaIdGetAsync
     *
     * get one
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdGetAsync($upazila_id)
    {
        return $this->apiV1UpazilasUpazilaIdGetAsyncWithHttpInfo($upazila_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdGetAsyncWithHttpInfo
     *
     * get one
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdGetAsyncWithHttpInfo($upazila_id)
    {
        $returnType = '';
        $request = $this->apiV1UpazilasUpazilaIdGetRequest($upazila_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UpazilasUpazilaIdGet'
     *
     * @param  int $upazila_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UpazilasUpazilaIdGetRequest($upazila_id)
    {
        // verify the required parameter 'upazila_id' is set
        if ($upazila_id === null || (is_array($upazila_id) && count($upazila_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upazila_id when calling apiV1UpazilasUpazilaIdGet'
            );
        }

        $resourcePath = '/api/v1/upazilas/{upazilaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($upazila_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upazilaId' . '}',
                ObjectSerializer::toPathValue($upazila_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdPut
     *
     * update
     *
     * @param  int $upazila_id upazila_id (required)
     * @param  int $loc_division_id loc_division_id (required)
     * @param  int $loc_district_id loc_district_id (required)
     * @param  string $title_en title_en (required)
     * @param  string $title_bn title_bn (required)
     * @param  float $division_bbs_code division_bbs_code (optional)
     * @param  float $district_bbs_code district_bbs_code (optional)
     * @param  string $bbs_code bbs_code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UpazilasUpazilaIdPut($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $this->apiV1UpazilasUpazilaIdPutWithHttpInfo($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);
    }

    /**
     * Operation apiV1UpazilasUpazilaIdPutWithHttpInfo
     *
     * update
     *
     * @param  int $upazila_id (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  float $division_bbs_code (optional)
     * @param  float $district_bbs_code (optional)
     * @param  string $bbs_code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UpazilasUpazilaIdPutWithHttpInfo($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $request = $this->apiV1UpazilasUpazilaIdPutRequest($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UpazilasUpazilaIdPutAsync
     *
     * update
     *
     * @param  int $upazila_id (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  float $division_bbs_code (optional)
     * @param  float $district_bbs_code (optional)
     * @param  string $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdPutAsync($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        return $this->apiV1UpazilasUpazilaIdPutAsyncWithHttpInfo($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UpazilasUpazilaIdPutAsyncWithHttpInfo
     *
     * update
     *
     * @param  int $upazila_id (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  float $division_bbs_code (optional)
     * @param  float $district_bbs_code (optional)
     * @param  string $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UpazilasUpazilaIdPutAsyncWithHttpInfo($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        $returnType = '';
        $request = $this->apiV1UpazilasUpazilaIdPutRequest($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code, $district_bbs_code, $bbs_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UpazilasUpazilaIdPut'
     *
     * @param  int $upazila_id (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  string $title_en (required)
     * @param  string $title_bn (required)
     * @param  float $division_bbs_code (optional)
     * @param  float $district_bbs_code (optional)
     * @param  string $bbs_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UpazilasUpazilaIdPutRequest($upazila_id, $loc_division_id, $loc_district_id, $title_en, $title_bn, $division_bbs_code = null, $district_bbs_code = null, $bbs_code = null)
    {
        // verify the required parameter 'upazila_id' is set
        if ($upazila_id === null || (is_array($upazila_id) && count($upazila_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upazila_id when calling apiV1UpazilasUpazilaIdPut'
            );
        }
        // verify the required parameter 'loc_division_id' is set
        if ($loc_division_id === null || (is_array($loc_division_id) && count($loc_division_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_division_id when calling apiV1UpazilasUpazilaIdPut'
            );
        }
        // verify the required parameter 'loc_district_id' is set
        if ($loc_district_id === null || (is_array($loc_district_id) && count($loc_district_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_district_id when calling apiV1UpazilasUpazilaIdPut'
            );
        }
        // verify the required parameter 'title_en' is set
        if ($title_en === null || (is_array($title_en) && count($title_en) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title_en when calling apiV1UpazilasUpazilaIdPut'
            );
        }
        // verify the required parameter 'title_bn' is set
        if ($title_bn === null || (is_array($title_bn) && count($title_bn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title_bn when calling apiV1UpazilasUpazilaIdPut'
            );
        }
        if ($division_bbs_code !== null && strlen($division_bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$division_bbs_code" when calling UpazilaApi.apiV1UpazilasUpazilaIdPut, must be smaller than or equal to 4.');
        }

        if ($district_bbs_code !== null && strlen($district_bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$district_bbs_code" when calling UpazilaApi.apiV1UpazilasUpazilaIdPut, must be smaller than or equal to 4.');
        }

        if ($bbs_code !== null && strlen($bbs_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$bbs_code" when calling UpazilaApi.apiV1UpazilasUpazilaIdPut, must be smaller than or equal to 4.');
        }


        $resourcePath = '/api/v1/upazilas/{upazilaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loc_division_id !== null) {
            if('form' === 'form' && is_array($loc_division_id)) {
                foreach($loc_division_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_division_id'] = $loc_division_id;
            }
        }
        // query params
        if ($loc_district_id !== null) {
            if('form' === 'form' && is_array($loc_district_id)) {
                foreach($loc_district_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_district_id'] = $loc_district_id;
            }
        }
        // query params
        if ($division_bbs_code !== null) {
            if('form' === 'form' && is_array($division_bbs_code)) {
                foreach($division_bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['division_bbs_code'] = $division_bbs_code;
            }
        }
        // query params
        if ($district_bbs_code !== null) {
            if('form' === 'form' && is_array($district_bbs_code)) {
                foreach($district_bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['district_bbs_code'] = $district_bbs_code;
            }
        }
        // query params
        if ($title_en !== null) {
            if('form' === 'form' && is_array($title_en)) {
                foreach($title_en as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_en'] = $title_en;
            }
        }
        // query params
        if ($title_bn !== null) {
            if('form' === 'form' && is_array($title_bn)) {
                foreach($title_bn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['title_bn'] = $title_bn;
            }
        }
        // query params
        if ($bbs_code !== null) {
            if('form' === 'form' && is_array($bbs_code)) {
                foreach($bbs_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bbs_code'] = $bbs_code;
            }
        }


        // path params
        if ($upazila_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upazilaId' . '}',
                ObjectSerializer::toPathValue($upazila_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
