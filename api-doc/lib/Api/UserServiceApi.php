<?php
/**
 * UserServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NISE_3_CORE_API
 *
 * It a core api service that manages Location Services,UserRoleManagement Services and Auth Services globally
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UserServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1UsersGet
     *
     * get list
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersGet()
    {
        $this->apiV1UsersGetWithHttpInfo();
    }

    /**
     * Operation apiV1UsersGetWithHttpInfo
     *
     * get list
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersGetWithHttpInfo()
    {
        $request = $this->apiV1UsersGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersGetAsync
     *
     * get list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersGetAsync()
    {
        return $this->apiV1UsersGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersGetAsyncWithHttpInfo
     *
     * get list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersGetAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->apiV1UsersGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersGetRequest()
    {

        $resourcePath = '/api/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersPost
     *
     * store
     *
     * @param  string $name_en name_en (required)
     * @param  string $name_bn name_bn (required)
     * @param  string $email email (required)
     * @param  int $loc_division_id loc_division_id (required)
     * @param  int $loc_district_id loc_district_id (required)
     * @param  int $loc_upazila_id loc_upazila_id (required)
     * @param  string $password password (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersPost($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $this->apiV1UsersPostWithHttpInfo($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);
    }

    /**
     * Operation apiV1UsersPostWithHttpInfo
     *
     * store
     *
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersPostWithHttpInfo($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $request = $this->apiV1UsersPostRequest($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersPostAsync
     *
     * store
     *
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersPostAsync($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        return $this->apiV1UsersPostAsyncWithHttpInfo($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersPostAsyncWithHttpInfo
     *
     * store
     *
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersPostAsyncWithHttpInfo($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $returnType = '';
        $request = $this->apiV1UsersPostRequest($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersPost'
     *
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersPostRequest($name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        // verify the required parameter 'name_en' is set
        if ($name_en === null || (is_array($name_en) && count($name_en) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_en when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'name_bn' is set
        if ($name_bn === null || (is_array($name_bn) && count($name_bn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_bn when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'loc_division_id' is set
        if ($loc_division_id === null || (is_array($loc_division_id) && count($loc_division_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_division_id when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'loc_district_id' is set
        if ($loc_district_id === null || (is_array($loc_district_id) && count($loc_district_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_district_id when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'loc_upazila_id' is set
        if ($loc_upazila_id === null || (is_array($loc_upazila_id) && count($loc_upazila_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_upazila_id when calling apiV1UsersPost'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling apiV1UsersPost'
            );
        }

        $resourcePath = '/api/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name_en !== null) {
            if('form' === 'form' && is_array($name_en)) {
                foreach($name_en as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_en'] = $name_en;
            }
        }
        // query params
        if ($name_bn !== null) {
            if('form' === 'form' && is_array($name_bn)) {
                foreach($name_bn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_bn'] = $name_bn;
            }
        }
        // query params
        if ($email !== null) {
            if('form' === 'form' && is_array($email)) {
                foreach($email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['email'] = $email;
            }
        }
        // query params
        if ($loc_division_id !== null) {
            if('form' === 'form' && is_array($loc_division_id)) {
                foreach($loc_division_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_division_id'] = $loc_division_id;
            }
        }
        // query params
        if ($loc_district_id !== null) {
            if('form' === 'form' && is_array($loc_district_id)) {
                foreach($loc_district_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_district_id'] = $loc_district_id;
            }
        }
        // query params
        if ($loc_upazila_id !== null) {
            if('form' === 'form' && is_array($loc_upazila_id)) {
                foreach($loc_upazila_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_upazila_id'] = $loc_upazila_id;
            }
        }
        // query params
        if ($password !== null) {
            if('form' === 'form' && is_array($password)) {
                foreach($password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['password'] = $password;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersUserIdAssignPermissionsPost
     *
     * assign-permissions
     *
     * @param  int $user_id user_id (required)
     * @param  int $permissions_0 permissions_0 (required)
     * @param  int $permissions_1 permissions_1 (required)
     * @param  int $permissions_2 permissions_2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersUserIdAssignPermissionsPost($user_id, $permissions_0, $permissions_1, $permissions_2)
    {
        $this->apiV1UsersUserIdAssignPermissionsPostWithHttpInfo($user_id, $permissions_0, $permissions_1, $permissions_2);
    }

    /**
     * Operation apiV1UsersUserIdAssignPermissionsPostWithHttpInfo
     *
     * assign-permissions
     *
     * @param  int $user_id (required)
     * @param  int $permissions_0 (required)
     * @param  int $permissions_1 (required)
     * @param  int $permissions_2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersUserIdAssignPermissionsPostWithHttpInfo($user_id, $permissions_0, $permissions_1, $permissions_2)
    {
        $request = $this->apiV1UsersUserIdAssignPermissionsPostRequest($user_id, $permissions_0, $permissions_1, $permissions_2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersUserIdAssignPermissionsPostAsync
     *
     * assign-permissions
     *
     * @param  int $user_id (required)
     * @param  int $permissions_0 (required)
     * @param  int $permissions_1 (required)
     * @param  int $permissions_2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdAssignPermissionsPostAsync($user_id, $permissions_0, $permissions_1, $permissions_2)
    {
        return $this->apiV1UsersUserIdAssignPermissionsPostAsyncWithHttpInfo($user_id, $permissions_0, $permissions_1, $permissions_2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersUserIdAssignPermissionsPostAsyncWithHttpInfo
     *
     * assign-permissions
     *
     * @param  int $user_id (required)
     * @param  int $permissions_0 (required)
     * @param  int $permissions_1 (required)
     * @param  int $permissions_2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdAssignPermissionsPostAsyncWithHttpInfo($user_id, $permissions_0, $permissions_1, $permissions_2)
    {
        $returnType = '';
        $request = $this->apiV1UsersUserIdAssignPermissionsPostRequest($user_id, $permissions_0, $permissions_1, $permissions_2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersUserIdAssignPermissionsPost'
     *
     * @param  int $user_id (required)
     * @param  int $permissions_0 (required)
     * @param  int $permissions_1 (required)
     * @param  int $permissions_2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersUserIdAssignPermissionsPostRequest($user_id, $permissions_0, $permissions_1, $permissions_2)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV1UsersUserIdAssignPermissionsPost'
            );
        }
        // verify the required parameter 'permissions_0' is set
        if ($permissions_0 === null || (is_array($permissions_0) && count($permissions_0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permissions_0 when calling apiV1UsersUserIdAssignPermissionsPost'
            );
        }
        // verify the required parameter 'permissions_1' is set
        if ($permissions_1 === null || (is_array($permissions_1) && count($permissions_1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permissions_1 when calling apiV1UsersUserIdAssignPermissionsPost'
            );
        }
        // verify the required parameter 'permissions_2' is set
        if ($permissions_2 === null || (is_array($permissions_2) && count($permissions_2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permissions_2 when calling apiV1UsersUserIdAssignPermissionsPost'
            );
        }

        $resourcePath = '/api/v1/users/{userId}/assign-permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($permissions_0 !== null) {
            if('form' === 'form' && is_array($permissions_0)) {
                foreach($permissions_0 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['permissions[0]'] = $permissions_0;
            }
        }
        // query params
        if ($permissions_1 !== null) {
            if('form' === 'form' && is_array($permissions_1)) {
                foreach($permissions_1 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['permissions[1]'] = $permissions_1;
            }
        }
        // query params
        if ($permissions_2 !== null) {
            if('form' === 'form' && is_array($permissions_2)) {
                foreach($permissions_2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['permissions[2]'] = $permissions_2;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersUserIdAssignRolePost
     *
     * assign-role
     *
     * @param  int $user_id user_id (required)
     * @param  int $role_id role_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersUserIdAssignRolePost($user_id, $role_id)
    {
        $this->apiV1UsersUserIdAssignRolePostWithHttpInfo($user_id, $role_id);
    }

    /**
     * Operation apiV1UsersUserIdAssignRolePostWithHttpInfo
     *
     * assign-role
     *
     * @param  int $user_id (required)
     * @param  int $role_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersUserIdAssignRolePostWithHttpInfo($user_id, $role_id)
    {
        $request = $this->apiV1UsersUserIdAssignRolePostRequest($user_id, $role_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersUserIdAssignRolePostAsync
     *
     * assign-role
     *
     * @param  int $user_id (required)
     * @param  int $role_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdAssignRolePostAsync($user_id, $role_id)
    {
        return $this->apiV1UsersUserIdAssignRolePostAsyncWithHttpInfo($user_id, $role_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersUserIdAssignRolePostAsyncWithHttpInfo
     *
     * assign-role
     *
     * @param  int $user_id (required)
     * @param  int $role_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdAssignRolePostAsyncWithHttpInfo($user_id, $role_id)
    {
        $returnType = '';
        $request = $this->apiV1UsersUserIdAssignRolePostRequest($user_id, $role_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersUserIdAssignRolePost'
     *
     * @param  int $user_id (required)
     * @param  int $role_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersUserIdAssignRolePostRequest($user_id, $role_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV1UsersUserIdAssignRolePost'
            );
        }
        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling apiV1UsersUserIdAssignRolePost'
            );
        }

        $resourcePath = '/api/v1/users/{userId}/assign-role';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($role_id !== null) {
            if('form' === 'form' && is_array($role_id)) {
                foreach($role_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['role_id'] = $role_id;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersUserIdDelete
     *
     * delete
     *
     * @param  int $user_id user_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersUserIdDelete($user_id)
    {
        $this->apiV1UsersUserIdDeleteWithHttpInfo($user_id);
    }

    /**
     * Operation apiV1UsersUserIdDeleteWithHttpInfo
     *
     * delete
     *
     * @param  int $user_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersUserIdDeleteWithHttpInfo($user_id)
    {
        $request = $this->apiV1UsersUserIdDeleteRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersUserIdDeleteAsync
     *
     * delete
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdDeleteAsync($user_id)
    {
        return $this->apiV1UsersUserIdDeleteAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersUserIdDeleteAsyncWithHttpInfo
     *
     * delete
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdDeleteAsyncWithHttpInfo($user_id)
    {
        $returnType = '';
        $request = $this->apiV1UsersUserIdDeleteRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersUserIdDelete'
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersUserIdDeleteRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV1UsersUserIdDelete'
            );
        }

        $resourcePath = '/api/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersUserIdGet
     *
     * get one
     *
     * @param  int $user_id user_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersUserIdGet($user_id)
    {
        $this->apiV1UsersUserIdGetWithHttpInfo($user_id);
    }

    /**
     * Operation apiV1UsersUserIdGetWithHttpInfo
     *
     * get one
     *
     * @param  int $user_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersUserIdGetWithHttpInfo($user_id)
    {
        $request = $this->apiV1UsersUserIdGetRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersUserIdGetAsync
     *
     * get one
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdGetAsync($user_id)
    {
        return $this->apiV1UsersUserIdGetAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersUserIdGetAsyncWithHttpInfo
     *
     * get one
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdGetAsyncWithHttpInfo($user_id)
    {
        $returnType = '';
        $request = $this->apiV1UsersUserIdGetRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersUserIdGet'
     *
     * @param  int $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersUserIdGetRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV1UsersUserIdGet'
            );
        }

        $resourcePath = '/api/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1UsersUserIdPut
     *
     * store
     *
     * @param  int $user_id user_id (required)
     * @param  string $name_en name_en (required)
     * @param  string $name_bn name_bn (required)
     * @param  string $email email (required)
     * @param  int $loc_division_id loc_division_id (required)
     * @param  int $loc_district_id loc_district_id (required)
     * @param  int $loc_upazila_id loc_upazila_id (required)
     * @param  string $password password (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1UsersUserIdPut($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $this->apiV1UsersUserIdPutWithHttpInfo($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);
    }

    /**
     * Operation apiV1UsersUserIdPutWithHttpInfo
     *
     * store
     *
     * @param  int $user_id (required)
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1UsersUserIdPutWithHttpInfo($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $request = $this->apiV1UsersUserIdPutRequest($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1UsersUserIdPutAsync
     *
     * store
     *
     * @param  int $user_id (required)
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdPutAsync($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        return $this->apiV1UsersUserIdPutAsyncWithHttpInfo($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1UsersUserIdPutAsyncWithHttpInfo
     *
     * store
     *
     * @param  int $user_id (required)
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1UsersUserIdPutAsyncWithHttpInfo($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        $returnType = '';
        $request = $this->apiV1UsersUserIdPutRequest($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1UsersUserIdPut'
     *
     * @param  int $user_id (required)
     * @param  string $name_en (required)
     * @param  string $name_bn (required)
     * @param  string $email (required)
     * @param  int $loc_division_id (required)
     * @param  int $loc_district_id (required)
     * @param  int $loc_upazila_id (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiV1UsersUserIdPutRequest($user_id, $name_en, $name_bn, $email, $loc_division_id, $loc_district_id, $loc_upazila_id, $password)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'name_en' is set
        if ($name_en === null || (is_array($name_en) && count($name_en) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_en when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'name_bn' is set
        if ($name_bn === null || (is_array($name_bn) && count($name_bn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_bn when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'loc_division_id' is set
        if ($loc_division_id === null || (is_array($loc_division_id) && count($loc_division_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_division_id when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'loc_district_id' is set
        if ($loc_district_id === null || (is_array($loc_district_id) && count($loc_district_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_district_id when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'loc_upazila_id' is set
        if ($loc_upazila_id === null || (is_array($loc_upazila_id) && count($loc_upazila_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loc_upazila_id when calling apiV1UsersUserIdPut'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling apiV1UsersUserIdPut'
            );
        }

        $resourcePath = '/api/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name_en !== null) {
            if('form' === 'form' && is_array($name_en)) {
                foreach($name_en as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_en'] = $name_en;
            }
        }
        // query params
        if ($name_bn !== null) {
            if('form' === 'form' && is_array($name_bn)) {
                foreach($name_bn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_bn'] = $name_bn;
            }
        }
        // query params
        if ($email !== null) {
            if('form' === 'form' && is_array($email)) {
                foreach($email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['email'] = $email;
            }
        }
        // query params
        if ($loc_division_id !== null) {
            if('form' === 'form' && is_array($loc_division_id)) {
                foreach($loc_division_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_division_id'] = $loc_division_id;
            }
        }
        // query params
        if ($loc_district_id !== null) {
            if('form' === 'form' && is_array($loc_district_id)) {
                foreach($loc_district_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_district_id'] = $loc_district_id;
            }
        }
        // query params
        if ($loc_upazila_id !== null) {
            if('form' === 'form' && is_array($loc_upazila_id)) {
                foreach($loc_upazila_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loc_upazila_id'] = $loc_upazila_id;
            }
        }
        // query params
        if ($password !== null) {
            if('form' === 'form' && is_array($password)) {
                foreach($password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['password'] = $password;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
